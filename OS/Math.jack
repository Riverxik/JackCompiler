/** OS Arithmetic operations 
 *	Author: RiVeRx
 *	Date: 22.03.2021
 */
class Math {
	static Array twoToThe;
	
	/** Initialization function */
	function void init() {
		var int i;
		let i = 0;
		let twoToThe = Array.new(16);	// Array for bit function.
		while (i < 16) {
			let twoToThe[i] = pow(2,i);
		}
		return;
	}
	
	/** Abs of x */
	function abs(int x) {
		if (x = 0) { return 0; }
		if (x > 0) { return x; }
		else { return -x; }
	}
	
	/** Multiply function */
	function int multiply(int x, int y) {
		var int sum, shiftedX, w;
		var boolean temp;
		let sum = 0;
		let shiftedX = x;
		let w = 0; // w-bit of number.
		
		while (w < 16) {
			let temp = bit(y, w); Gets w-th bit of y
			if (temp = 1) {
				let sum = sum + shiftedX;
			}
			let shiftedX = shiftedX + shiftedX;
			let w = w + 1;
		}
		return sum;
	}
	
	/** Divide function */
	function int divide(int x, int y) {
		var int q;
		var boolean neg;
		if (y = 0) { return -1; } 		// Error.
		if (x = 0) { return 0; }
		let neg = resultNeg(x, y);
		let x = abs(x);
		let y = abs(y);
		// divide |x| by |y| and set the result's sign
		if (y > x) or (y < 0) { return 0; }
		let q = divide(x, y + y);
		if ((x - (q * (y + y)) < y) { 	// ((x - 2 * q * y) < y)
			let q = q + q;
		} else {
			let q = q + q + 1;
		}
		// set the sign.
		if (neg) {
			return -q;
		} else {
			return q;
		}
	}
	
	function boolean resultNeg(int x, int y) {
		if (x < 0) and (y > 0) or (x > 0) and (y < 0) {
			return true;
		}
		return false;
	}
	
	/** Returns remained of division (x % y) */
	function int getRemainder(int x, int y) {
		var mult;
		let mult = x / y;
		return x - (y * mult);
	}
	
	/** Minimum of x and y 
	* If x < y return x, otherwise y
	*/
	function int min(int x, int y) {
		if (x < y) { return x; }
		else { return y; }
	}
	
	/** Maximum of x and y 
	* If x > y return x, otherwise y
	*/
	function int max(int x, int y) {
		if (x > y) { return x; }
		else { return y; }
	}
	
	/** Square root */
	function int sqrt(int x) {
		var int y, j, n, temp;
		let y = 0;
		while (j > 0) {
			let j = (n / 2) - 1;
			let temp = (y + pow(2,j)) * (y + pow(2,j));
			if (temp > 0) and (temp < x) or (temp = x) {
				let y = y + pow(2,j);
			} else {
				// Error overflow.
			}
			// if ((y + 2^j)^2 <= x) and ((y + 2^j)^2 > 0) 
			// then y = y + 2^j;
			// else overflow error
		}
		return y;
	}
	
	/** Power x^y */
	function int pow(int x, int y) {
		if (x = 0) { return 0; }
		if (y = 0) { return 1; }
		while (y > 1) {
			x = x * x;
			y = y - 1;
		}
		return x;
	}
	
	/** Returns true if the i-th bit of x is 1, otherwise false */
	function boolean bit(int x, int i) {
		if (x = (twoToThe[i] and x)) {
			return true;
		}
		return false;
	}
}