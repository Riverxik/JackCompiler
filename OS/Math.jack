/** OS Arithmetic operations 
 *	Author: RiVeRx
 *	Date: 22.03.2021
 */
class Math {
	static Array twoToThe;
	
	/** Initialization function */
	function void init() {
		var int x;
		let x = 0;
		let twoToThe = Array.new(16); // Array for bit function.
		let twoToThe[0] = 1;
		while (x < 15) {
			let x = x + 1;
			let twoToThe[x] = twoToThe[x - 1] + twoToThe[x - 1];
		}
		return;
	}
	
	function Array getTwoToThe() { return twoToThe; }
	
	function void printArray() {
		var int x;
		let x = 0;
		while (x < 16) {
			do Output.printString("2^");
			do Output.printInt(x);
			do Output.printString("= ");
			do Output.printInt(twoToThe[x]);
			do Output.println();
			let x = x + 1;
		}
		return;
	}
	
	/** Abs of x */
	function int abs(int x) {
		if (x < 0) {
			let x = -x;
		}
		return x;
	}
	
	/** Multiply function */
	function int multiply(int x, int y) {
		var int sum, shiftedX, w;
		let sum = 0;
		let shiftedX = x;
		let w = 0; // w-bit of number.
		
		while (w < 16) {
			if (bit(y, w)) { // Gets w-th bit of y
				let sum = sum + shiftedX;
			}
			let shiftedX = shiftedX + shiftedX;
			let w = w + 1;
		}
		return sum;
	}
	
	/** Divide function */
	function int divide(int x, int y) {
		var int q, tx, ty;
		if (y = 0) { do Sys.error(3); } // Division by zero
		if (x = 0) { return 0; }
		let tx = abs(x);
		let ty = abs(y);
		// divide |x| by |y| and set the result's sign
		let q = doDivide(tx, ty);
		// set the sign.
		if ((x < 0) = (y < 0)) {
			return q;
		} else {
			return -q;
		}
	}
	
	/** Returns the integer part of x / y
	 *	where x >= 0 and y > 0 
	 */
	function int doDivide(int x, int y) {
		var int q;
		if ((y > x) | (y < 0)) { return 0; }
		let q = doDivide(x, y + y);
		if ((x - (q * (y + y))) < y) { 	// ((x - 2 * q * y) < y)
			let q = q + q;
		} else {
			let q = q + q + 1;
		}
		return q;
	}
	
	/** Returns remained of division (x % y) */
	function int getRemainder(int x, int y) {
		var int multi;
		let multi = x / y;
		return x - (y * multi);
	}
	
	/** Minimum of x and y 
	* If x < y return x, otherwise y
	*/
	function int min(int x, int y) {
		if (x < y) { return x; }
		else { return y; }
	}
	
	/** Maximum of x and y 
	* If x > y return x, otherwise y
	*/
	function int max(int x, int y) {
		if (x > y) { return x; }
		else { return y; }
	}
	
	/** Square root */
	function int sqrt(int x) {
		var int y, j, temp, tPow;
		if (x < 0) { do Sys.error(4); } // Cannot compute square root of a negative number.
		let y = 0;
		let j = 7; // Cause 16 bit sqrt uses max of 8 bits - 1 (if i get it right). 
		while (~(j < 0)) {
			let temp = y + twoToThe[j];
			let tPow = temp * temp; //pow(temp, 2);
			if ((~(tPow > x)) & (tPow > 0)) {
				let y = temp;
			}
			let j = j - 1;
		}
		return y;
	}
	
	/** Power x^y */
	function int pow(int x, int y) {
		var int answer, inc, i, j;
		if (x = 0) { return 0; }
		if (y = 0) { return 1; }
		let answer = x;
		let inc = x;
		let i = 1;
		while (i < y) {
            let j = 1;
            while (j < x) {
                let answer = answer + inc;
                let j = j + 1;
            }
            let inc = answer;
            let i = i + 1;
		}
		return answer;
	}
	
	/** Returns true if the i-th bit of x is 1, otherwise false */
	function boolean bit(int x, int i) {
		return ~((x & twoToThe[i]) = 0);
		/* if (x = (twoToThe[i] & x)) {
			return true;
		}
		return false; */
	}
}