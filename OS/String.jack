/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
	field int strMaxLength;
    field int length;

    /** Constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if (maxLength < 0) { do Sys.error(12); } // Maximum length must be non-negative.
        if (maxLength = 0) { 
			let str = Array.new(1);
		} else {
			let str = Array.new(maxLength);
		}
        let strMaxLength = maxLength;
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (~(j < length) | (j < 0)) { do Sys.error(13); } // String index out of bounds.
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j > 0 & j < length) {
            let str[j] = c;
            return;
        } else {
            do Sys.error(14); // String index out of bounds.
        }
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length = strMaxLength) { do Sys.error(15); } // String is full.
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) { do Sys.error(16); } // String is empty.
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i, len, d;
        let val = 0;
        let i = 0;
        let len = length;
        while (i < len) {
            let d = str[i] - 48;    // Gets the first digit from string and converts it to int
            let val = val * 10 + d;
            let i = i + 1;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
		if (val < 0) {
			do appendChar(45); // -
			let val = -val;
			do Debug.logInt("-Val= ", val);
		}
		do evalInt(val);
        return;
    }
	
	method void evalInt(int val) {
		var int lastDigit;
        var char c;
        let lastDigit = Math.getRemainder(val, 10);
		do Debug.logInt("c =", lastDigit);
        let c = 48 + lastDigit; // 48 is char value of 0.
        if (~(val < 10)) {
            let val = val / 10;
            do evalInt(val);
        }
        if (~(length < strMaxLength)) { do Sys.error(17); } // Insufficient string capacity.
        do appendChar(c);
		return;
	}

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}