/**
 * A library that supports various program execution services.
 */
class Sys {

    /** Performs all the initializations required by the OS. */
    function void init() {
        // Initialize OS libs.
        do Math.init();
        do Memory.init();
        do Screen.init();
        // Call Main application.
        do Main.main();
        return;
    }

    /** Halts the program execution. */
    function void halt() {
        // Maybe infinity loop (not elegant).
    }

    /** Waits approximately duration milliseconds and returns.  */
    function void wait(int duration) {
        var int slowConst;
        if (duration < 0) { do error(1); }
        let slowConst = 10;
        let duration = duration * slowConst;
        while (duration > 0) {
            let duration = duration - 1;
        }
        return;
    }

    /** Displays the given error code in the form "ERR<errorCode>",
     *  and halts the program's execution. */
    function void error(int errorCode) {
        if (errorCode < 0) { do Output.printString("Error code must be positive"); }
        if (errorCode = 1) { do Output.printString("Duration must be positive"); }
        if (errorCode = 2) { do Output.printString("Array size must be positive"); }
        if (errorCode = 3) { do Output.printString("Division by zero"); }
        if (errorCode = 4) { do Output.printString("Cannot compute square root of a negative number"); }
        if (errorCode = 5) { do Output.printString("Allocated memory size must be positive"); }
        if (errorCode = 6) { do Output.printString("Heap overflow"); }
        if (errorCode = 7) { do Output.printString("Illegal pixel coordinates"); }
        if (errorCode = 8) { do Output.printString("Illegal line coordinates"); }
        if (errorCode = 9) { do Output.printString("Illegal rectangle coordinates"); }
        if (errorCode = 10) { do Output.printString("Illegal center coordinates"); }
        if (errorCode = 11) { do Output.printString("Illegal radius"); }
        if (errorCode = 12) { do Output.printString("Maximum length must be non-negative"); }
        if (errorCode = 13) { do Output.printString("String index out of bounds"); }
        if (errorCode = 14) { do Output.printString("String index out of bounds"); }
        if (errorCode = 15) { do Output.printString("String is full"); }
        if (errorCode = 16) { do Output.printString("String is empty"); }
        if (errorCode = 17) { do Output.printString("Insufficient string capacity"); }
        if (errorCode = 18) { do Output.printString("Illegal cursor location"); }
        if (errorCode = 19) { do Output.printString("Potential number overflow"); }
        do halt();
    }
}